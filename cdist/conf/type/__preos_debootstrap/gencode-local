#!/bin/sh
##
## 2016 Darko Poljak (darko.poljak at ungleich.ch)
##
## This file is part of cdist.
##
## cdist is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## cdist is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with cdist. If not, see <http://www.gnu.org/licenses/>.

bootstrap_dir="/$__object_id"
os=$(cat "$__object/parameter/os")

case "${os}" in
    ubuntu|debian)
        # nothing, those are valid values
        ;;
    *)
        echo "ERROR: invalid os value: ${os}" >&2
        exit 1
        ;;
esac

# bootstrap
if [ -f "$__object/parameter/bootstrap" ]
then
    command -v debootstrap 2>&1 > /dev/null || {
        echo "ERROR: debootstrap not found" >&2
        exit 1
    }

    arch=$(cat "$__object/parameter/arch")
    suite=$(cat "$__object/parameter/suite")

    if [ -f "$__object/parameter/mirror" ]
    then
        mirror=$(cat "$__object/parameter/mirror")
    else
        mirror=
    fi

    if [ -e "${bootstrap_dir}" ]
    then
        dir_content=$(ls -A "${bootstrap_dir}" | wc -l)
    else
        dir_content=0
    fi
    if [ "${dir_content}" -ne 0 ]
    then
        echo "ERROR: "${bootstrap_dir}" not empty " >&2
        exit 1
    fi

    cat <<EOF
mkdir -p "${bootstrap_dir}"
debootstrap --include=openssh-server --arch=${arch} ${suite} ${bootstrap_dir} \
    ${mirror}
EOF
fi

# config
if [ -f "$__object/parameter/configure" ]
then
    cdist_params=$(cat "$__object/parameter/cdist-params")
    if [ -f "$__object/parameter/init-manifest" ]
    then
        init_manifest=$(cat "$__object/parameter/init-manifest")
    else
        init_manifest="${__type}/files/init-manifest-${os}"
    fi
    if [ ! -f "${init_manifest}" ]
    then
        echo "ERROR: ${init_manifest} does not exist" >&2
        exit 1
    fi
    if [ -f "$__object/parameter/remote-exec" ]
    then
        remote_exec=$(cat "$__object/parameter/remote-exec")
    else
        remote_exec="${__type}/files/remote-exec.sh"
    fi
    if [ ! -f "${remote_exec}" ]
    then
        echo "ERROR: ${remote_exec} does not exist" >&2
        exit 1
    fi
    if [ -f "$__object/parameter/remote-copy" ]
    then
        remote_copy=$(cat "$__object/parameter/remote-copy")
    else
        remote_copy="${__type}/files/remote-copy.sh"
    fi
    if [ ! -f "${remote_copy}" ]
    then
        echo "ERROR: ${remote_copy} does not exist" >&2
        exit 1
    fi

    if [ -f "${__object}/parameter/trigger-command" ]
    then
        trigger_command=$(cat "${__object}/parameter/trigger-command")
        trigger_line="__cdist_preos_trigger http --trigger-command '${trigger_command}'\n"
    else
        trigger_line=""
    fi

    if [ -f "${__object}/parameter/keyfile" ]
    then
        keyfiles=""
        while read keyfile
        do
            if [ ! -f "${keyfile}" ]
            then
                echo "ERROR: ${keyfile} does not exist" >&2
                exit 1
            fi
            key=$(cat "${keyfile}")
            keyfiles="${keyfiles} --key '${key}'"
        done < "$__object/parameter/keyfile"
        ssh_auth_keys_line="__ssh_authorized_keys root ${keyfiles}\n"
    else
        ssh_auth_keys_line=""
    fi

    cat <<EOF
check_bootstrap_dir() {
    if [ ! -e "\$1" ]
    then
        echo "ERROR: bootstrap directory $1 does not exist" >&2
        exit 1
    fi
}

check_bootstrap_dir "${bootstrap_dir}"

TRAPFUNC="umount \"${bootstrap_dir}/dev/pts\" || true; \
umount \"${bootstrap_dir}/dev\" || true; \
umount \"${bootstrap_dir}/sys\" || true; \
umount \"${bootstrap_dir}/proc\" || true;"

trap "\${TRAPFUNC}" 0 1 2 3 15

mount -t proc none "${bootstrap_dir}/proc" || true
mount -t sysfs none "${bootstrap_dir}/sys" || true
mount -o bind /dev "${bootstrap_dir}/dev" || true
mount -t devpts none "${bootstrap_dir}/dev/pts" || true

chroot "${bootstrap_dir}" /usr/bin/apt-get update

printf "${trigger_line}${ssh_auth_keys_line}" | cat "${init_manifest}" - |\
    cdist config \
        ${cdist_params} -i - \
        --remote-exec "${remote_exec}" \
        --remote-copy "${remote_copy}" \
        "${bootstrap_dir}"

# __hostname with systmed uses hostnamectl which needs dbus running
# set hostname explicitly here instead
printf "preos\n" > "${bootstrap_dir}/etc/hostname"

chroot "${bootstrap_dir}" /usr/bin/apt-get autoclean
chroot "${bootstrap_dir}" /usr/bin/apt-get clean
chroot "${bootstrap_dir}" /usr/bin/apt-get autoremove

umount "${bootstrap_dir}/dev/pts" || true
umount "${bootstrap_dir}/dev" || true
umount "${bootstrap_dir}/sys" || true
umount "${bootstrap_dir}/proc" || true

trap - 0 1 2 3 15
EOF
fi

if [ -f "$__object/parameter/pxe-boot-dir" ]
then
    pxe_boot_dir=$(cat "$__object/parameter/pxe-boot-dir")
    cat <<EOF
check_bootstrap_dir() {
    if [ ! -e "\$1" ]
    then
        echo "ERROR: bootstrap directory $1 does not exist" >&2
        exit 1
    fi
}

check_bootstrap_dir "${bootstrap_dir}"

mkdir -p "${pxe_boot_dir}"
cp "${bootstrap_dir}"/boot/vmlinuz-* "${pxe_boot_dir}/kernel"
cd "${bootstrap_dir}"
find . -print0 | cpio --null -o --format=newc | gzip -9 > "${pxe_boot_dir}/initramfs"

mkdir -p "${pxe_boot_dir}/pxelinux.cfg"
cat <<EOPXEF > "${pxe_boot_dir}/pxelinux.cfg/default"
DEFAULT preos
LABEL preos
KERNEL kernel
APPEND utf8 load_ramdisk=1 root=/dev/ram nofb initrd=initramfs console=ttyS1,115200 net.ifnames=0
EOPXEF

cp "${bootstrap_dir}/usr/lib/PXELINUX/pxelinux.0" "${pxe_boot_dir}/pxelinux.0"
cp "${bootstrap_dir}/usr/lib/syslinux/modules/bios/ldlinux.c32" \
    "${pxe_boot_dir}/ldlinux.c32"
# network boot need all files world readable
chmod -R 644 "${pxe_boot_dir}"/*
EOF
fi

if [ -f "$__object/parameter/rm-bootstrap-dir" ]
then
    cat <<EOF
rm -r -f "${bootstrap_dir}"
EOF
fi
